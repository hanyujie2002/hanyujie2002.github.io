[{"data":1,"prerenderedAt":339},["Reactive",2],{"content-query-9RYDuyEjVE":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"_empty":6,"title":8,"description":9,"body":10,"_type":334,"_id":335,"_source":336,"_file":337,"_extension":338},"/blog/en/no.4_fermat_algorithm_-_a_great_way_to_cheak_whether_or_not_a_int_num_is_a_prime_num","en",false,"","No4FermatAlgorithm AGreatWayToCheakWhetherOrNotAIntNumIsAPrimeNum","I presuppose that you know what prime num is.",{"type":11,"children":12,"toc":330},"root",[13,30,37,57,63,70,75,137,142,193,199,211,220,232,319,325],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18,24],{"type":14,"tag":19,"props":20,"children":23},"img",{"alt":21,"src":22},"random","https://api.ixiaowai.cn/api/api.php",[],{"type":14,"tag":25,"props":26,"children":27},"em",{},[28],{"type":29,"value":9},"text",{"type":14,"tag":31,"props":32,"children":34},"h2",{"id":33},"problem",[35],{"type":29,"value":36},"Problem",{"type":14,"tag":15,"props":38,"children":39},{},[40,42,48,50,55],{"type":29,"value":41},"How to judge whether or not a ",{"type":14,"tag":43,"props":44,"children":45},"strong",{},[46],{"type":29,"value":47},"int",{"type":29,"value":49}," num $n$ is a ",{"type":14,"tag":43,"props":51,"children":52},{},[53],{"type":29,"value":54},"prime num",{"type":29,"value":56},"?",{"type":14,"tag":31,"props":58,"children":60},{"id":59},"solution",[61],{"type":29,"value":62},"Solution",{"type":14,"tag":64,"props":65,"children":67},"h4",{"id":66},"solution-one",[68],{"type":29,"value":69},"Solution one",{"type":14,"tag":15,"props":71,"children":72},{},[73],{"type":29,"value":74},"This solution is easy to thought out. Just traversing from $1$ to $n-1$, if any num being traversed if divisible by $n$, then it's a composite num.",{"type":14,"tag":76,"props":77,"children":82},"code",{"className":78,"code":80,"language":81,"meta":7},[79],"language-Python","def is_prime(n):  # the input num n is the num we want to judge\n if n == 1: return False  # special judge, if the num is one, then it's not a prime num\n for i in range(2, n):  # try every int num in [2, n-1] \n  if not n%i: return False  # i \u003C n, so if n%i == 0, then n must be a composite num.\n return True  # if there are no num which is between 1 and n-1 is divisible by n, then n is a prime num\n","Python",[83],{"type":14,"tag":84,"props":85,"children":86},"pre",{},[87],{"type":14,"tag":76,"props":88,"children":89},{"__ignoreMap":7},[90,101,110,119,128],{"type":14,"tag":91,"props":92,"children":95},"span",{"class":93,"line":94},"line",1,[96],{"type":14,"tag":91,"props":97,"children":98},{},[99],{"type":29,"value":100},"def is_prime(n):  # the input num n is the num we want to judge\n",{"type":14,"tag":91,"props":102,"children":104},{"class":93,"line":103},2,[105],{"type":14,"tag":91,"props":106,"children":107},{},[108],{"type":29,"value":109}," if n == 1: return False  # special judge, if the num is one, then it's not a prime num\n",{"type":14,"tag":91,"props":111,"children":113},{"class":93,"line":112},3,[114],{"type":14,"tag":91,"props":115,"children":116},{},[117],{"type":29,"value":118}," for i in range(2, n):  # try every int num in [2, n-1] \n",{"type":14,"tag":91,"props":120,"children":122},{"class":93,"line":121},4,[123],{"type":14,"tag":91,"props":124,"children":125},{},[126],{"type":29,"value":127},"  if not n%i: return False  # i \u003C n, so if n%i == 0, then n must be a composite num.\n",{"type":14,"tag":91,"props":129,"children":131},{"class":93,"line":130},5,[132],{"type":14,"tag":91,"props":133,"children":134},{},[135],{"type":29,"value":136}," return True  # if there are no num which is between 1 and n-1 is divisible by n, then n is a prime num",{"type":14,"tag":15,"props":138,"children":139},{},[140],{"type":29,"value":141},"If you are a more skilled programmer or you are sensitive to numbers, you may thought out that we can just traversing int num from 2 to $\\sqrt{n}$ for that any composite num could be divided into num pairs like a and b which c==a*b and if a was bigger that $\\sqrt{n}$, b must be smaller than $\\sqrt{n}$.",{"type":14,"tag":76,"props":143,"children":146},{"className":144,"code":145,"language":81,"meta":7},[79],"def is_prime_1(n):  # same to the code above\n if n == 1: return False\n for i in range(2, int(n**0.5)+1):  # try every int num in [2, int(sqrt(i))]\n  if not n%i: return False\n return True\n",[147],{"type":14,"tag":84,"props":148,"children":149},{},[150],{"type":14,"tag":76,"props":151,"children":152},{"__ignoreMap":7},[153,161,169,177,185],{"type":14,"tag":91,"props":154,"children":155},{"class":93,"line":94},[156],{"type":14,"tag":91,"props":157,"children":158},{},[159],{"type":29,"value":160},"def is_prime_1(n):  # same to the code above\n",{"type":14,"tag":91,"props":162,"children":163},{"class":93,"line":103},[164],{"type":14,"tag":91,"props":165,"children":166},{},[167],{"type":29,"value":168}," if n == 1: return False\n",{"type":14,"tag":91,"props":170,"children":171},{"class":93,"line":112},[172],{"type":14,"tag":91,"props":173,"children":174},{},[175],{"type":29,"value":176}," for i in range(2, int(n**0.5)+1):  # try every int num in [2, int(sqrt(i))]\n",{"type":14,"tag":91,"props":178,"children":179},{"class":93,"line":121},[180],{"type":14,"tag":91,"props":181,"children":182},{},[183],{"type":29,"value":184},"  if not n%i: return False\n",{"type":14,"tag":91,"props":186,"children":187},{"class":93,"line":130},[188],{"type":14,"tag":91,"props":189,"children":190},{},[191],{"type":29,"value":192}," return True",{"type":14,"tag":64,"props":194,"children":196},{"id":195},"solution-two",[197],{"type":29,"value":198},"Solution two",{"type":14,"tag":15,"props":200,"children":201},{},[202,204,209],{"type":29,"value":203},"According to ",{"type":14,"tag":43,"props":205,"children":206},{},[207],{"type":29,"value":208},"Fermat's little theorem",{"type":29,"value":210},":",{"type":14,"tag":212,"props":213,"children":214},"blockquote",{},[215],{"type":14,"tag":15,"props":216,"children":217},{},[218],{"type":29,"value":219},"if a num $p$ is a prime num, then $a^{p-1}\\equiv 1(mod;p)(a\\subseteq \\mathcal{z}^*;and;0\u003Ca\u003Cp)$",{"type":14,"tag":15,"props":221,"children":222},{},[223,225,230],{"type":29,"value":224},"So, we can try some random num in ",{"type":14,"tag":91,"props":226,"children":227},{},[228],{"type":29,"value":229},"1, p-1",{"type":29,"value":231},", if with the random num a, $a^{p-1}\\not\\equiv 1(mod;p)$, then $p$ must not be a prime num. However, if $a^{p-1}\\equiv 1(mod;p)$, then it's still possible that p is not a prime num, so we must check it for serveral times.",{"type":14,"tag":76,"props":233,"children":236},{"className":234,"code":235,"language":81,"meta":7},[79],"def fermat(n):\n if n==2: return True  # same to the code above.\n if n&1==1 or n==1: return False  # Special judge, if n is a even num and n is not 2 or n is 1, it's not a prime num. \n\n for i in range(15):\n  a = random.randint(2, n-1)  # randomly choice a num from 2 to n-1\n  if pow(a, n-1, n) != 1: return False  # if the (n-1)th power of a mod n is not equal to 1, n must be a composite num.\n \n return True  # else n is very likely to be a prime num\n",[237],{"type":14,"tag":84,"props":238,"children":239},{},[240],{"type":14,"tag":76,"props":241,"children":242},{"__ignoreMap":7},[243,251,259,267,275,283,292,301,310],{"type":14,"tag":91,"props":244,"children":245},{"class":93,"line":94},[246],{"type":14,"tag":91,"props":247,"children":248},{},[249],{"type":29,"value":250},"def fermat(n):\n",{"type":14,"tag":91,"props":252,"children":253},{"class":93,"line":103},[254],{"type":14,"tag":91,"props":255,"children":256},{},[257],{"type":29,"value":258}," if n==2: return True  # same to the code above.\n",{"type":14,"tag":91,"props":260,"children":261},{"class":93,"line":112},[262],{"type":14,"tag":91,"props":263,"children":264},{},[265],{"type":29,"value":266}," if n&1==1 or n==1: return False  # Special judge, if n is a even num and n is not 2 or n is 1, it's not a prime num. \n",{"type":14,"tag":91,"props":268,"children":269},{"class":93,"line":121},[270],{"type":14,"tag":91,"props":271,"children":272},{},[273],{"type":29,"value":274},"\n",{"type":14,"tag":91,"props":276,"children":277},{"class":93,"line":130},[278],{"type":14,"tag":91,"props":279,"children":280},{},[281],{"type":29,"value":282}," for i in range(15):\n",{"type":14,"tag":91,"props":284,"children":286},{"class":93,"line":285},6,[287],{"type":14,"tag":91,"props":288,"children":289},{},[290],{"type":29,"value":291},"  a = random.randint(2, n-1)  # randomly choice a num from 2 to n-1\n",{"type":14,"tag":91,"props":293,"children":295},{"class":93,"line":294},7,[296],{"type":14,"tag":91,"props":297,"children":298},{},[299],{"type":29,"value":300},"  if pow(a, n-1, n) != 1: return False  # if the (n-1)th power of a mod n is not equal to 1, n must be a composite num.\n",{"type":14,"tag":91,"props":302,"children":304},{"class":93,"line":303},8,[305],{"type":14,"tag":91,"props":306,"children":307},{},[308],{"type":29,"value":309}," \n",{"type":14,"tag":91,"props":311,"children":313},{"class":93,"line":312},9,[314],{"type":14,"tag":91,"props":315,"children":316},{},[317],{"type":29,"value":318}," return True  # else n is very likely to be a prime num",{"type":14,"tag":64,"props":320,"children":322},{"id":321},"which-is-better",[323],{"type":29,"value":324},"Which is better?",{"type":14,"tag":15,"props":326,"children":327},{},[328],{"type":29,"value":329},"if you have a high demand for the accuracy, then you'd better choose the Solution one.\nelse if the num is quite large, you'd better choose the Solution two.",{"title":7,"searchDepth":103,"depth":103,"links":331},[332,333],{"id":33,"depth":103,"text":36},{"id":59,"depth":103,"text":62},"markdown","content:blog:en:No.4_Fermat_Algorithm_-_A_great_way_to_cheak_whether_or_not_a_int_num_is_a_prime_num.md","content","blog/en/No.4_Fermat_Algorithm_-_A_great_way_to_cheak_whether_or_not_a_int_num_is_a_prime_num.md","md",1693357499074]